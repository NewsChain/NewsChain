{
  "_args": [
    [
      "lexicographic-integer@^1.1.0",
      "/root/NewsChain/node_modules/hyperlog"
    ]
  ],
  "_from": "lexicographic-integer@>=1.1.0 <2.0.0",
  "_id": "lexicographic-integer@1.1.0",
  "_inCache": true,
  "_location": "/lexicographic-integer",
  "_npmUser": {
    "email": "mail@substack.net",
    "name": "substack"
  },
  "_npmVersion": "1.3.7",
  "_phantomChildren": {},
  "_requested": {
    "name": "lexicographic-integer",
    "raw": "lexicographic-integer@^1.1.0",
    "rawSpec": "^1.1.0",
    "scope": null,
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/hyperlog",
    "/level-logs"
  ],
  "_resolved": "https://registry.npmjs.org/lexicographic-integer/-/lexicographic-integer-1.1.0.tgz",
  "_shasum": "52ca6d998a572e6322b515f5b80e396c6043e9b8",
  "_shrinkwrap": null,
  "_spec": "lexicographic-integer@^1.1.0",
  "_where": "/root/NewsChain/node_modules/hyperlog",
  "author": {
    "email": "mail@substack.net",
    "name": "James Halliday",
    "url": "http://substack.net"
  },
  "bugs": {
    "url": "https://github.com/substack/lexicographic-integer/issues"
  },
  "dependencies": {},
  "description": "create lexicographic string keys for positive integers without zero-padding",
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "directories": {},
  "dist": {
    "shasum": "52ca6d998a572e6322b515f5b80e396c6043e9b8",
    "tarball": "https://registry.npmjs.org/lexicographic-integer/-/lexicographic-integer-1.1.0.tgz"
  },
  "homepage": "https://github.com/substack/lexicographic-integer",
  "installable": true,
  "keywords": [
    "encoding",
    "integer",
    "lexicographic",
    "pack",
    "padding"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "substack",
      "email": "mail@substack.net"
    }
  ],
  "name": "lexicographic-integer",
  "optionalDependencies": {},
  "readme": "# lexicographic-integer\n\ncreate lexicographic string keys for positive integers without zero-padding\n\nAt most, a number will take 10 bytes to store (2 more bytes than a regular\ndouble) but all numbers less than 251 only take a single byte.\n\n[![build status](https://secure.travis-ci.org/substack/lexicographic-integer.png)](http://travis-ci.org/substack/lexicographic-integer)\n\n# example\n\n## pack\n\n``` js\nvar lexi = require('lexicographic-integer');\nconsole.log(lexi.pack(12345));\n```\n\noutput:\n\n```\n[ 252, 47, 62 ]\n```\n\n## unpack\n\nTo convert the arrays back into integers, just do `.unpack()`:\n\n``` js\nvar lexi = require('lexicographic-integer');\nconsole.log(lexi.unpack([ 252, 47, 62 ]));\n```\n\noutput:\n\n```\n12345\n```\n\n## hex list\n\n``` js\nvar lexi = require('lexicographic-integer');\n\nfor (var n = 0; n < 5; n++) {\n    console.log(n, lexi.pack(n, 'hex'));\n}\n\nconsole.log('...');\n\nfor (var n = 248; n < 257; n++) {\n    console.log(n, lexi.pack(n, 'hex'));\n}\n\nconsole.log('...');\n\nfor (var n = 5000; n < 5005; n++) {\n    console.log(n, lexi.pack(n, 'hex'));\n}\n\nconsole.log('...');\n\nfor (var n = 21378213; n < Number.MAX_VALUE; n *= 1513254198219212) {\n    console.log(n, lexi.pack(n, 'hex'));\n}\n```\n\noutput:\n\n```\n0 '00'\n1 '01'\n2 '02'\n3 '03'\n4 '04'\n...\n248 'f8'\n249 'f9'\n250 'fa'\n251 'fb00'\n252 'fb01'\n253 'fb02'\n254 'fb03'\n255 'fb04'\n256 'fb05'\n...\n5000 'fc128d'\n5001 'fc128e'\n5002 'fc128f'\n5003 'fc1290'\n5004 'fc1291'\n...\n21378213 'fe014633aa'\n3.2350670572674536e+22 'ff2a0db3777bb94c'\n4.895478805930646e+37 'ff5d09351659b187'\n7.408103855367726e+52 'ff8f0c6004db1f28'\n1.121034425997914e+68 'ffc20850f8bf332a'\n1.696410051489608e+83 'fff40b2d6c283bb4'\n2.5670996323179187e+98 'fffb2b0f05dd909879'\n3.884674295852086e+113 'fffb5e0a187f7c58cd'\n5.87849968691243e+128 'fffb900d91aaff96fe'\n8.895664330450558e+143 'fffbc3091e5fb56b0c'\n1.3461401394003201e+159 'fffbf50c417dbf1c6c'\n2.03705221733893e+174 'fffc0128083c74d68fa0'\n3.08257781987989e+189 'fffc015a0b11d96218aa'\n4.6647238272706696e+204 'fffc018c0ee0ce4aceb6'\n7.058912915150531e+219 'fffc01bf09ff97d9a0a7'\n1.0681929603715358e+235 'fffc01f10d7031e40fc8'\n1.6164474817904348e+250 'fffc02240907e1192454'\n2.4460959380202488e+265 'fffc02560c2341f2013d'\n3.701564947456103e+280 'fffc028908282389ba9c'\n5.601408696719025e+295 'fffc02bb0af68aa1140f'\n```\n\n# methods\n\n``` js\nvar lexi = require('lexicographic-integer')\n```\n\n## lexi.pack(n, encoding='array')\n\nIf `encoding` is `undefined` or `'array'`, return an array of byte values\nbetween 0 and 255, inclusive for the integer `n`.\n\nIf `encoding` is `'hex'`, return a lexicographic hex string for the integer `n`.\n\n## lexi.unpack(bytes)\n\nConvert an array of `bytes` returned by `.pack()` back into the original\njavascript number.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install lexicographic-integer\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/lexicographic-integer.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "version": "1.1.0"
}
